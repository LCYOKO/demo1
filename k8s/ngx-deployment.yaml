apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  labels:
    app: nginx-deploy
  annotations:
    kubernetes.io/change-cause: v1, ngx=1.21
spec:
  #成功后需要等待的时间
  minReadySeconds: 15
  # 副本的数量  kubectl scale --replicas=2 deploy nginx-deploy
  replicas: 2
  selector:
    # 选择app=nginx的Pod
    matchLabels:
      app: nginx-dep
  # 选择或创建的Pod的模板
  template:
    metadata:
      labels:
        app: nginx-dep
    spec:
      # 容器的路径
      containers:
        - image: nginx:alpine
          name: nginx-latest
          ports:
            - containerPort: 80
              name: nginx-80
          resources:
            requests:
              # 1000m = 1个cpu
              cpu: 100m
              # Ki、Mi、Gi 来表示 KB、MB、GB
              memory: 200Mi
            limits:
              cpu: 200m
              memory: 1Gi
#          #启动探针，只有启动后才会启用livenessProbe和readinessProbe
          #StartupProbe 探针主要用来解决服务启动慢的问题，对于一些大型的应用例如 Java 服
          #务，我建议你为它们配置 StartupProbe，以确保在服务启动完成后再对它进行常规的就绪和存
          #活健康检查
          #  - `initialDelaySeconds` 的含义是在容器启动之后，延迟 10 秒钟再进行第一次探针检查。
          # - `failureThreshold` 的含义是，如果连续 5 次探针失败则代表 Readiness 探针失败，Pod 状
          #态为 NotReady，此时 Pod 不会接收外部请求。
          # - `periodSeconds` 的含义是探针每 10 秒钟轮询检测 1 次。
          # - `successThreshold` 的含义是只要探针成功 1 次就代表探针成功了，Pod 状态为 Ready 表
          #示可以接收外部请求。
          # - `timeoutSeconds` 代表探针的超时时间为 1 秒
#          startupProbe:
#            periodSeconds: 1
#            exec:
#              command: [ "cat", "/var/run/nginx.pid" ]
#          #存活探针
#          livenessProbe:
#            periodSeconds: 10
#            tcpSocket:
#              port: 80
#          #就绪探针 访问某个接口比如/ready
#          readinessProbe:
#            periodSeconds: 5
#            # 超时时间
#            timeoutSeconds: 10
#            # 多少次失败才算失败
#            failureThreshold: 3
#            # 多少次才算成功
#            successThreshold: 1
#            httpGet:
#              path: /ready
#              port: 80
          # 容器内的路径
#          volumeMounts:
#            - name: config
#              mountPath: /etc/nginx/nginx.conf
#            - name: config-include
#              mountPath: /etc/nginx/conf.d/
#            - name: log
#              mountPath: /var/log/nginx/
#            - name: html
#              mountPath: /usr/share/nginx/html/
#            - name: cert
#              mountPath: /etc/nginx/cert/
#      # 主机的路径
#      volumes:
#        - name: config #和volumeMounts中的内容要对应
#          hostPath:
#            path: /work/devops/k8s/app/nginx/config/nginx.conf
#            type: File
#        - name: config-include #和volumeMounts中的内容要对应
#          hostPath:
#            path: /work/devops/k8s/app/nginx/config/conf.d/
#            type: DirectoryOrCreate
#        - name: log #和volumeMounts中的内容要对应
#          hostPath:
#            path: /work/devops/k8s/app/nginx/logs/
#            type: DirectoryOrCreate
#        - name: html #和volumeMounts中的内容要对应
#          hostPath:
#            path: /work/devops/k8s/app/nginx/html/
#            type: DirectoryOrCreate
#        - name: cert #和volumeMounts中的内容要对应
#          hostPath:
#            path: /work/devops/k8s/app/nginx/cert/