/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.demo.rpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2023-12-18")
public class BookInfo implements org.apache.thrift.TBase<BookInfo, BookInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BookInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BookInfo");

  private static final org.apache.thrift.protocol.TField BOOK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BOOK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bookName", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BookInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BookInfoTupleSchemeFactory());
  }

  public int bookId; // required
  public String bookName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOK_ID((short)1, "bookId"),
    BOOK_NAME((short)2, "bookName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOK_ID
          return BOOK_ID;
        case 2: // BOOK_NAME
          return BOOK_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOKID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOK_ID, new org.apache.thrift.meta_data.FieldMetaData("bookId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bookName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BookInfo.class, metaDataMap);
  }

  public BookInfo() {
  }

  public BookInfo(
    int bookId,
    String bookName)
  {
    this();
    this.bookId = bookId;
    setBookIdIsSet(true);
    this.bookName = bookName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BookInfo(BookInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bookId = other.bookId;
    if (other.isSetBookName()) {
      this.bookName = other.bookName;
    }
  }

  public BookInfo deepCopy() {
    return new BookInfo(this);
  }

  @Override
  public void clear() {
    setBookIdIsSet(false);
    this.bookId = 0;
    this.bookName = null;
  }

  public int getBookId() {
    return this.bookId;
  }

  public BookInfo setBookId(int bookId) {
    this.bookId = bookId;
    setBookIdIsSet(true);
    return this;
  }

  public void unsetBookId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOKID_ISSET_ID);
  }

  /** Returns true if field bookId is set (has been assigned a value) and false otherwise */
  public boolean isSetBookId() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOKID_ISSET_ID);
  }

  public void setBookIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOKID_ISSET_ID, value);
  }

  public String getBookName() {
    return this.bookName;
  }

  public BookInfo setBookName(String bookName) {
    this.bookName = bookName;
    return this;
  }

  public void unsetBookName() {
    this.bookName = null;
  }

  /** Returns true if field bookName is set (has been assigned a value) and false otherwise */
  public boolean isSetBookName() {
    return this.bookName != null;
  }

  public void setBookNameIsSet(boolean value) {
    if (!value) {
      this.bookName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOK_ID:
      if (value == null) {
        unsetBookId();
      } else {
        setBookId((Integer)value);
      }
      break;

    case BOOK_NAME:
      if (value == null) {
        unsetBookName();
      } else {
        setBookName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOK_ID:
      return getBookId();

    case BOOK_NAME:
      return getBookName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOK_ID:
      return isSetBookId();
    case BOOK_NAME:
      return isSetBookName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BookInfo)
      return this.equals((BookInfo)that);
    return false;
  }

  public boolean equals(BookInfo that) {
    if (that == null)
      return false;

    boolean this_present_bookId = true;
    boolean that_present_bookId = true;
    if (this_present_bookId || that_present_bookId) {
      if (!(this_present_bookId && that_present_bookId))
        return false;
      if (this.bookId != that.bookId)
        return false;
    }

    boolean this_present_bookName = true && this.isSetBookName();
    boolean that_present_bookName = true && that.isSetBookName();
    if (this_present_bookName || that_present_bookName) {
      if (!(this_present_bookName && that_present_bookName))
        return false;
      if (!this.bookName.equals(that.bookName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bookId = true;
    list.add(present_bookId);
    if (present_bookId)
      list.add(bookId);

    boolean present_bookName = true && (isSetBookName());
    list.add(present_bookName);
    if (present_bookName)
      list.add(bookName);

    return list.hashCode();
  }

  @Override
  public int compareTo(BookInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBookId()).compareTo(other.isSetBookId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookId, other.bookId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookName()).compareTo(other.isSetBookName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookName, other.bookName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BookInfo(");
    boolean first = true;

    sb.append("bookId:");
    sb.append(this.bookId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookName:");
    if (this.bookName == null) {
      sb.append("null");
    } else {
      sb.append(this.bookName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'bookId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BookInfoStandardSchemeFactory implements SchemeFactory {
    public BookInfoStandardScheme getScheme() {
      return new BookInfoStandardScheme();
    }
  }

  private static class BookInfoStandardScheme extends StandardScheme<BookInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BookInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bookId = iprot.readI32();
              struct.setBookIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bookName = iprot.readString();
              struct.setBookNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBookId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bookId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BookInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOK_ID_FIELD_DESC);
      oprot.writeI32(struct.bookId);
      oprot.writeFieldEnd();
      if (struct.bookName != null) {
        oprot.writeFieldBegin(BOOK_NAME_FIELD_DESC);
        oprot.writeString(struct.bookName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BookInfoTupleSchemeFactory implements SchemeFactory {
    public BookInfoTupleScheme getScheme() {
      return new BookInfoTupleScheme();
    }
  }

  private static class BookInfoTupleScheme extends TupleScheme<BookInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BookInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.bookId);
      BitSet optionals = new BitSet();
      if (struct.isSetBookName()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetBookName()) {
        oprot.writeString(struct.bookName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BookInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.bookId = iprot.readI32();
      struct.setBookIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.bookName = iprot.readString();
        struct.setBookNameIsSet(true);
      }
    }
  }

}

